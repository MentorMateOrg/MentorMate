// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  MENTEE
  MENTOR
  UNKNOWN
}

model User {
  id                 Int                 @id @default(autoincrement())
  email              String              @unique
  encrypted_password String
  profile            Profile?
  sentRequests       ConnectionRequest[] @relation("sentRequests")
  receivedRequests   ConnectionRequest[] @relation("receivedRequests")
  createdRooms       Room[]              @relation("UserCreatedRooms")
  roomSessions       RoomSession[]       @relation("UserRoomSessions")
  codeChanges        CodeChange[]
  todos              Todo[]
  goals              Goal[]
  milestones         Milestone[]
  userBadges         UserBadge[]
  mentorshipPlans    MentorshipPlan[]    @relation("MentorshipPlanUser")
  articles           Article[]           @relation("UserArticles")
  articleLikes       ArticleLike[]       @relation("UserArticleLikes")
  comments           Comment[]           @relation("UserComments")
}

model Profile {
  id               Int      @id @default(autoincrement())
  user             User     @relation(fields: [userId], references: [id])
  userId           Int      @unique
  full_name        String
  role             Role
  profilePicUrl    String?  @default("https://static.vecteezy.com/system/resources/previews/055/581/121/non_2x/default-profile-picture-icon-avatar-photo-placeholder-illustration-vector.jpg")
  githubUrl        String?
  fieldOfKnowledge String?
  experiences      String[]
  linkedinUrl      String?
  created_at       DateTime @default(now())
  updated_at       DateTime @default(now())
  interests        String[]
  bio              String?
}

model ConnectionRequest {
  id         Int      @id @default(autoincrement())
  senderId   Int
  receiverId Int
  status     String   @default("PENDING")
  createdAt  DateTime @default(now())
  sender     User     @relation("sentRequests", fields: [senderId], references: [id])
  receiver   User     @relation("receivedRequests", fields: [receiverId], references: [id])
}

model Room {
  id          Int           @id @default(autoincrement())
  roomId      String        @unique
  title       String
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @default(now())
  language    String        @default("javascript")
  createdById Int
  createdBy   User          @relation("UserCreatedRooms", fields: [createdById], references: [id])
  sessions    RoomSession[]
  codeChanges CodeChange[]
}

model RoomSession {
  id        Int      @id @default(autoincrement())
  room      Room     @relation(fields: [roomId], references: [id])
  roomId    Int
  userId    Int
  user      User     @relation("UserRoomSessions", fields: [userId], references: [id])
  code      String
  createdAt DateTime @default(now())
  language  String
}

model CodeChange {
  id             Int      @id @default(autoincrement())
  room           Room     @relation(fields: [roomId], references: [id])
  roomId         Int
  user           User     @relation(fields: [userId], references: [id])
  userId         Int
  timestamp      DateTime @default(now())
  versionId      String
  parentId       String?
  operations     Json
  isSavedVersion Boolean  @default(false)
}

model Todo {
  id          Int      @id @default(autoincrement())
  title       String
  description String?
  completed   Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  user        User     @relation(fields: [userId], references: [id])
  userId      Int
}

model Goal {
  id          Int         @id @default(autoincrement())
  title       String
  description String?
  targetDate  DateTime?
  completed   Boolean     @default(false)
  progress    Int         @default(0) // Progress percentage (0-100)
  category    String // e.g., "technical", "communication", "leadership"
  priority    String      @default("medium") // "low", "medium", "high"
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  user        User        @relation(fields: [userId], references: [id])
  userId      Int
  milestones  Milestone[]
}

model Milestone {
  id          Int       @id @default(autoincrement())
  title       String
  description String?
  completed   Boolean   @default(false)
  dueDate     DateTime?
  completedAt DateTime?
  order       Int       @default(0) // Order within the goal
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  user        User      @relation(fields: [userId], references: [id])
  userId      Int
  goal        Goal?     @relation(fields: [goalId], references: [id])
  goalId      Int?
}

model Badge {
  id          Int         @id @default(autoincrement())
  name        String      @unique
  description String
  icon        String // Icon name or emoji
  category    String // e.g., "achievement", "progress", "community"
  criteria    String // Description of how to earn this badge
  createdAt   DateTime    @default(now())
  userBadges  UserBadge[]
}

model UserBadge {
  id       Int      @id @default(autoincrement())
  earnedAt DateTime @default(now())
  user     User     @relation(fields: [userId], references: [id])
  userId   Int
  badge    Badge    @relation(fields: [badgeId], references: [id])
  badgeId  Int

  @@unique([userId, badgeId])
}

model MentorshipPlan {
  id          Int       @id @default(autoincrement())
  title       String
  description String?
  duration    Int // Duration in weeks
  phase       String    @default("planning") // "planning", "active", "completed"
  startDate   DateTime?
  endDate     DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  user        User      @relation("MentorshipPlanUser", fields: [userId], references: [id])
  userId      Int
  template    Json? // Store plan template structure
}

model Article {
  id          Int           @id @default(autoincrement())
  title       String
  content     String
  published   Boolean       @default(true)
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  author      User          @relation("UserArticles", fields: [authorId], references: [id])
  authorId    Int
  likes       ArticleLike[]
  comments    Comment[]
}

model ArticleLike {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  user      User     @relation("UserArticleLikes", fields: [userId], references: [id])
  userId    Int
  article   Article  @relation(fields: [articleId], references: [id], onDelete: Cascade)
  articleId Int

  @@unique([userId, articleId])
}

model Comment {
  id        Int      @id @default(autoincrement())
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  author    User     @relation("UserComments", fields: [authorId], references: [id])
  authorId  Int
  article   Article  @relation(fields: [articleId], references: [id], onDelete: Cascade)
  articleId Int
}
